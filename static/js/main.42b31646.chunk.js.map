{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableCell","props","onClick","setState","currColor","selectedColor","state","style","this","Component","TableRow","createCols","cols","i","numCols","push","Table","createRows","rows","console","log","numRows","App","addRow","addCol","changeColor","e","target","value","className","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAuBeA,E,YApBd,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KAOPC,QAAU,WACT,EAAKC,SAAS,CAACC,UAAW,EAAKH,MAAMI,iBAPrC,EAAKC,MAAM,CACVF,UAAW,MAHK,E,sEAgBjB,IAAIG,EAAO,CAAC,mBAAmBC,KAAKF,MAAMF,WAC1C,OAAO,wBAAIG,MAAOA,EAAOL,QAASM,KAAKN,SAAhC,gB,GAlBeO,aCiBTC,E,YAfd,WAAYT,GAAO,IAAD,8BACjB,4CAAMA,KAGPU,WAAa,WAEZ,IADA,IAAIC,EAAO,GACHC,EAAI,EAAGA,EAAI,EAAKZ,MAAMa,QAASD,IACtCD,EAAKG,KAAK,kBAAC,EAAD,CAAWV,cAAe,EAAKJ,MAAMI,iBAEhD,OAAOO,GATU,E,sEAYjB,OAAO,4BAAKJ,KAAKG,kB,GAbIF,aCkBRO,E,YAjBd,WAAYf,GAAO,IAAD,8BACjB,4CAAMA,KAGPgB,WAAa,WACZ,IAAIC,EAAO,GACXC,QAAQC,IAAI,EAAKnB,MAAMoB,SACvB,IAAI,IAAIR,EAAI,EAAGA,EAAI,EAAKZ,MAAMoB,QAASR,IACtCK,EAAKH,KAAK,kBAAC,EAAD,CAAUD,QAAS,EAAKb,MAAMa,QAAST,cAAe,EAAKJ,MAAMI,iBAE5E,OAAOa,GAVU,E,sEAcjB,OAAO,+BAAO,+BAAQV,KAAKS,mB,GAfTR,aC0CLa,G,kBAxCb,aAAc,IAAD,8BACX,+CAOFC,OAAS,WACP,EAAKpB,SAAS,CAACkB,QAAS,EAAKf,MAAMe,QAAQ,KAThC,EAabG,OAAS,WACP,EAAKrB,SAAS,CAACW,QAAS,EAAKR,MAAMQ,QAAQ,KAdhC,EAiBbW,YAAc,SAACC,GACb,EAAKvB,SAAS,CAACE,cAAcqB,EAAEC,OAAOC,SAhBtC,EAAKtB,MAAQ,CACXe,QAAS,EACTP,QAAS,EACTT,cAAe,WALN,E,sEAqBX,OACE,yBAAKwB,UAAU,OACf,4BAAQA,UAAU,iBAAiB3B,QAASM,KAAKe,QAAjD,WACA,4BAAQM,UAAU,iBAAiB3B,QAASM,KAAKgB,QAAjD,WACA,4BAAQM,SAAWtB,KAAKiB,aACtB,4BAAQG,MAAM,WAAd,WACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,cAAd,eAEF,kBAAC,EAAD,CAAOP,QAASb,KAAKF,MAAMe,QAASP,QAASN,KAAKF,MAAMQ,QACtDT,cAAeG,KAAKF,MAAMD,qB,GAnChBI,cCQEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.42b31646.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TableCell extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tcurrColor: null\n\t\t}\n\n\t}\n\n\tonClick = () => {\n\t\tthis.setState({currColor: this.props.selectedColor});\n\t\t// const that = this;\n\t\t// return (e) => {\n\t\t// \tthis.style.backgroundColor = that.props.selectedColor;\n\t\t// }\n\t}\n\trender(){\n\t\tlet style= {\"background-color\":this.state.currColor};\n\t\treturn(<td style={style} onClick={this.onClick}>hello!!!</td>);\n\t}\n}\nexport default TableCell;","import React, { Component } from 'react';\nimport TableCell from './TableCell';\n\nclass TableRow extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\n\t}\n\tcreateCols = () => {\n\t\tlet cols = [];\n\t\tfor(let i = 0; i < this.props.numCols; i++){\n\t\t\tcols.push(<TableCell selectedColor={this.props.selectedColor} />)\n\t\t}\n\t\treturn cols;\n\t}\n\trender(){\n\t\treturn(<tr>{this.createCols()}</tr>);\n\t}\n}\nexport default TableRow;","import React, { Component } from 'react';\nimport TableRow from './TableRow.js';\n\nclass Table extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\n\t}\n\tcreateRows = () => {\n\t\tlet rows = [];\n\t\tconsole.log(this.props.numRows);\n\t\tfor(let i = 0; i < this.props.numRows; i++){\n\t\t\trows.push(<TableRow numCols={this.props.numCols} selectedColor={this.props.selectedColor} />);\n\t\t}\n\t\treturn rows;\n\n\t}\n\trender(){\n\t\treturn(<table><tbody>{this.createRows()}</tbody></table>);\n\t}\n}\nexport default Table;","import React, { Component } from 'react';\nimport {Table, TableRow, TableCell} from './components';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      numRows: 0,\n      numCols: 1,\n      selectedColor: \"#f0e3ff\"\n    }\n  }\n  addRow = () => {\n    this.setState({numRows: this.state.numRows+1})\n    //console.log(this.state.numRows);\n\n  }\n  addCol = () => {\n    this.setState({numCols: this.state.numCols+1})\n\n  }\n  changeColor = (e) => {\n    this.setState({selectedColor:e.target.value});\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      <button className=\"add-row-button\" onClick={this.addRow}>Add Row</button>\n      <button className=\"add-col-button\" onClick={this.addCol}>Add Col</button>\n      <select onChange ={this.changeColor}>\n        <option value=\"#f0e3ff\">purple1</option>\n        <option value=\"#d89cf6\">purple2</option>\n        <option value=\"#3e206d\">purple3</option>\n        <option value=\"limegreen\">limegreen</option>\n        <option value=\"hotpink\">hotpink</option>\n        <option value=\"PowderBlue\">powderblue</option>\n      </select>\n      <Table numRows={this.state.numRows} numCols={this.state.numCols} \n        selectedColor={this.state.selectedColor} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}